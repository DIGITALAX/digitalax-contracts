const AttacherArtifact = require('../../artifacts/DigitalaxMaterialsV2Attacher.json');
const CollectionArtifact = require('../../artifacts/DigitalaxGarmentCollectionV2.json');

async function main() {
  const [deployer] = await ethers.getSigners();
  const deployerAddress = await deployer.getAddress();
  console.log(
      'Deploying and setting up collections on marketplace with the following address:',
      deployerAddress
  );

  MAX_NFT_SINGLE_TX = 100;

  const {ATTACHER_ADDRESS, GARMENT_COLLECTION_ADDRESS} = process.env;
  console.log(`BURNER_ADDRESS found [${ATTACHER_ADDRESS}]`);


  const attacher = new ethers.Contract(
      ATTACHER_ADDRESS,
      AttacherArtifact.abi,
      deployer
  );

  const collectionContract = new ethers.Contract(
      GARMENT_COLLECTION_ADDRESS,
      CollectionArtifact.abi,
      deployer
  );

  const metadata = {
    "data":
       // [132840,132841,132842,132843,132844,132241,132242,132845,132846,132847,132848,132849,132850,132851,132852,132853,132854,133125,132856,132857,132858,132859,132860,132252,132253,132254,133126,133127,133128,133129,133130,133131,133132,133133,133134,133135,133136,133137,133138,133139,133140,133141,133142,133143,133144,133145,133146,133147,133148,133149,133150,133151,133152,133153,133154,133155,133156,133157,133158,133159,133160,133161,133162,133163,133164,133165,133166,133167,133168,133169,133170,133171,133172,133173,133174,133175,133176,133177,133178,133179,133180,133181,133182,133183,133184,133185,133186,133187,133188,133189,133190,133191,133192,133193,133194,133195,133196,133197,133198,133199,133200,133201,133202,133203,133204,133205,133206,133207,133208,133209,133210,133211,133212,133213,133214,133215,133216,133217,133218,133219,133220,133221,133222,133223,133224,133225,132861,132862,132863,132864,132865,132866,132867,132868,132869,132870,132871,132872,132873,132874,132367,132368,132369,132370,132371,132372,132373,132374,132375,132376,132377,132378,132875,132876,132877,132382,132878,132879,132880,131850,131851,131852,131853,131854,132901,132902,132903,132904,132905,132906,132907,132908,132909,132910,132911,132912,132913,131868,131869,131870,131871,131872,131873,131874,131875,131876,131877,132914,132915,132916,132917,132918,132919,132920,132921,132922,132923,132924,132925,132926,132927,132928,132929,132930,132931,132932,132933,132934,132935,132936,132937,132938,131900,131901,131902,131903,131904,131905,131906,131907,131908,131909,131910,131911,131912,131913,131914,131915,131916,131917,131918,131919,131920,131921,131922,131923,131924,131925,131926,131927,131928,131929,131930,131931,131932,131933,131934,131935,131936,131937,131938,131939,131940,131941,131942,131943,131944,131945,131946,131947,131948,131949,131950,131951,131952,131953,131954,131955,131956,131957,131958,131959,131960,131961,131962,131963,131964,131965,131966,131967,131968,131969,131970,131971,131972,131973,131974,131975,131976,131977,131978,131979,131980,131981,131982,131983,132939,132940,132941,132942,
          //[132943,132944,132945,132946,132947,132948,131994,131995,131996,131997,131998,131999,132000,132001,132002,132003,132004,132005,132006,132007,132008,132009,132010,132011,132012,132013,132014,132015,132016,132017,132018,132019,132020,132021,132022,132023,132024,132025,132026,132027,132028,132029,132030,132031,132032,132033,132034,132035,132036,132037,132038,132039,132040,132041,132042,132043,132044,132045,132046,132047,132048,132049,132050,132051,132052,132053,132054,132055,132056,132057,132058,132059,132060,132061,132062,132063,132064,132065,132066,132067,132068,132069,132070,132071,132072,132073,132074,132075,132076,132077,132078,132079,132080,132081,132082,132083,131831,131832,131833,131840,131841,131842,132971,131844,131845,132972,132973,132974,133095,133096,133097,133098,133099,133100,133101,133102,133103,133104,133105,133106,133107,133108,133109,133110,131819,131820,131821,131822,131823,133111,133112,131826,131827,131828,131829,131830,132084,132085,132086,132087,132088,132089,132090,132091,132092,132093,132094,132095,132096,132097,132098,132099,132100,132101,132102,132103,132104,132105,132106,132107,132108,132109,132110,132111,132112,132113,132114,132115,132116,132117,132118,132119,132120,132121,132122,132123,132124,132125,132126,132127,132128,132129,132130,132131,132132,132133,132134,132891,132892,132893,132894,132895,132896,132897,132898,132899,132900,132145,132146,132147,132148,132149,132786,132787,132788,132789,132790,132791,132792,132793,132794,132795,132796,132797,132798,132799,132800,132185,132186,132187,132188,132189,132190,132191,132192,132193,132194,133011,133012,133013,133014,133015,133016,133017,133018,133019,133020,132205,132206,132207,132208,132209,132210,132211,132212,133093,133094,132215,132216,132217,132218,132219,132220,133023,133024,133025,133026,133027,133028,133029,133030,133031,133032,133036,133037,133038,133039,133040,133041,133042,133043,133044,133045,133033,133034,133035,132780,132781,132782,132783,132784,132785,133046,132150,132151,132152,132153,132154,132155,132156,132157,132158,132159,132160,132801,132802,133226,133227,133228,133229,133230,133231,133232,133233,133234,133235,133236,133237,133238,133239,133240,133241,133242,133243,133244,133245,132823,132824,132825,132826,132171,132172,132173,132174,132175,132176,132177,132178,132179,132181,132182,132827,132828,132829,132184,132744,132745,132746,132747,132748,132749,132750,132751,132752,132753,132830,132831,132832,132833,132834,132835,132836,132837,132838,132839,132420,132421,132422,132423,132424,132425,132426,132427,132428,132429,132430,132431,132432,132433,132434,132435,132436,132437,132438,132439,132440,132441,132442,132443,132444,132445,132446,132447,132448,132449,132450,132451,132452,132453,132454,132455,132456,132457,132458,132949,132950,132951,132952,132953,
            [132954,132955,132956,132957,132958,132959,132960,132961,132962,132474,132475,132476,132477,132478,132479,132480,132481,132482,133111,133112,132487,132488,132489,132490,132491,132492,132493,132494,132495,132496,132497,132498,132499,132500,132501,132502,132503,132504,132505,132506,132507,132508,132509,132510,132511,132512,132513,132514,132515,132516,132517,132518,132519,132520,132521,132522,132523,132524,132525,132526,132527,132528,132529,132530,132531,132532,132533,132534,132535,132536,132537,132538,132539,132540,132541,132542,132543,132544,132545,132546,132547,132548,132549,132550,132551,132552,132553,132554,132555,132556,132557,132558,132559,132560,132561,132562,132563,132564,132565,132566,132567,132568,132569,132570,132571,132572,132573,132574,132575,132576,132577,132578,132579,132580,132581,132582,132583,132584,132585,132586,132587,132588,132589,132590,132591,132592,132593,132594,132595,132596,132597,132598,132599,132600,132601,132602,132603,132604,132605,132606,132607,132608,132609,132610,132611,133121,133122,133123,133124,132616,132617,132618,132619,132620,132621,132622,132623,132624,132625,132626,132627,132628,132629,132630,132631,132632,132633,132634,132635,132636,132637,132638,132639,132640,132641,132642,132643,132644,132645,132646,132647,132648,132649,132650,132651,132652,132653,132654,132655,132656,132657,132658,132659,132660,132661,132662,132663,132664,132665,132666,132667,132668,132669,132670,132671,132672,132673,132674,132675,132676,132677,132678,132679,132680,132681,132682,132683,132684,132685,132686,132687,132688,132689,132690,132691,132692,132693,132694,132754,132755,132756,132757,132758,132759,132760,132761,132762,132763,132764,132765,132766,132767,132768,132769,132770,132771,132772,132773]
  }

  //  Data length
  console.log(metadata.data.length)
   let tokenArray = [];
  // for(let i = 0; i< metadata.data.length ; i++){
  //   const x = metadata.data[i];


    console.log(`----------------------`);

    let amountToBurn = metadata.data.length;
    let numberOfLoops = 0;

    if(amountToBurn > MAX_NFT_SINGLE_TX){
      numberOfLoops = Math.floor(amountToBurn / MAX_NFT_SINGLE_TX);
      amountToBurn = amountToBurn % MAX_NFT_SINGLE_TX; // Use this if you need to burn an uneven amount
    }

    let currentLoop = 0;
    if(numberOfLoops > 0){
      while(numberOfLoops--){
        const keys = [...Array(MAX_NFT_SINGLE_TX).keys()].map(function(x)
        { return metadata.data[(x + (currentLoop * MAX_NFT_SINGLE_TX))]; });
       // if(keys[0] > lastTokenId){ return;}

        const tx2 = await attacher.attachERC1155ToExisting721(
            keys , [100308], [1]
        );
        console.log(tx2.hash);
        await tx2.wait();
        console.log(keys)
        console.log('Have been attached');

        currentLoop++;
      }
    }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
    .then(() => process.exit(0))
    .catch(error => {
      console.error(error);
      process.exit(1);
    });
